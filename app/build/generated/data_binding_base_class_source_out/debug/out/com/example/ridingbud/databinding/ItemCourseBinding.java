// Generated by view binder compiler. Do not edit!
package com.example.ridingbud.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.ridingbud.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemCourseBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageButton bookmarkBtn;

  @NonNull
  public final TextView border;

  @NonNull
  public final TextView courseName;

  @NonNull
  public final TextView distance;

  @NonNull
  public final TextView time;

  private ItemCourseBinding(@NonNull ConstraintLayout rootView, @NonNull ImageButton bookmarkBtn,
      @NonNull TextView border, @NonNull TextView courseName, @NonNull TextView distance,
      @NonNull TextView time) {
    this.rootView = rootView;
    this.bookmarkBtn = bookmarkBtn;
    this.border = border;
    this.courseName = courseName;
    this.distance = distance;
    this.time = time;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemCourseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemCourseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_course, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemCourseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bookmark_btn;
      ImageButton bookmarkBtn = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkBtn == null) {
        break missingId;
      }

      id = R.id.border;
      TextView border = ViewBindings.findChildViewById(rootView, id);
      if (border == null) {
        break missingId;
      }

      id = R.id.course_name;
      TextView courseName = ViewBindings.findChildViewById(rootView, id);
      if (courseName == null) {
        break missingId;
      }

      id = R.id.distance;
      TextView distance = ViewBindings.findChildViewById(rootView, id);
      if (distance == null) {
        break missingId;
      }

      id = R.id.time;
      TextView time = ViewBindings.findChildViewById(rootView, id);
      if (time == null) {
        break missingId;
      }

      return new ItemCourseBinding((ConstraintLayout) rootView, bookmarkBtn, border, courseName,
          distance, time);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
